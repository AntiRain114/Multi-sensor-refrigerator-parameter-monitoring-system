facet_wrap(~date) +
labs(title = "24-hour Temperature Changes", x = "Hour", y = "Average Temperature") +
theme_minimal()
# 4. 
去
重
后
的
唯
一
事
件
分
布
unique_events <- data %>%
select(date, hour, light_cycle_duration, temp_change_1, temp_change_2, temp_change_3, humidity_change) %>%
pivot_longer(cols = c(light_cycle_duration, temp_change_1, temp_change_2, temp_change_3, humidity_change),
names_to = "event_type",
values_to = "value") %>%
filter(!is.na(value)) %>%
distinct(date, hour, event_type) %>%
count(date, event_type)
ggplot(unique_events, aes(x = date, y = n, fill = event_type)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Distribution of Unique Events", x = "Date", y = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# 
保
存
图
表
ggsave("humidity_changes.png", width = 10, height = 6)
ggsave("light_cycle_duration.png", width = 10, height = 6)
ggsave("temperature_changes.png", width = 15, height = 10)
ggsave("unique_events_distribution.png", width = 10, height = 6)
data <- data %>%
group_by(device_id) %>%
mutate(
temp_change_1 = abs(temperature_1 - lag(temperature_1)),
temp_change_2 = abs(temperature_2 - lag(temperature_2)),
temp_change_3 = abs(temperature_3 - lag(temperature_3)),
humidity_change = abs(humidity - lag(humidity))
) %>%
ungroup()
# 1. 
湿
度
变
化
分
析
humidity_change_analysis <- data %>%
group_by(date, hour) %>%
summarise(avg_humidity_change = mean(humidity_change, na.rm = TRUE))
ggplot(humidity_change_analysis, aes(x = hour, y = avg_humidity_change, color = date, group = date)) +
geom_line() +
labs(title = "24-hour Humidity Changes", x = "Hour", y = "Average Humidity Change") +
theme_minimal()
# 2. 
光
照
循
环
分
析 (
保
持
不
变)
light_cycle_analysis <- data %>%
filter(!is.na(light_cycle_duration)) %>%
group_by(date) %>%
summarise(total_light_duration = sum(light_cycle_duration, na.rm = TRUE))
ggplot(light_cycle_analysis, aes(x = date, y = total_light_duration)) +
geom_bar(stat = "identity") +
labs(title = "Daily Light Cycle Duration", x = "Date", y = "Total Light Duration (minutes)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# 3. 
温
度
变
化
分
析
temperature_change_analysis <- data %>%
group_by(date, hour) %>%
summarise(
avg_temp_change_1 = mean(temp_change_1, na.rm = TRUE),
avg_temp_change_2 = mean(temp_change_2, na.rm = TRUE),
avg_temp_change_3 = mean(temp_change_3, na.rm = TRUE)
) %>%
pivot_longer(cols = starts_with("avg_temp"), names_to = "sensor", values_to = "temperature_change")
ggplot(temperature_change_analysis, aes(x = hour, y = temperature_change, color = sensor, group = interaction(date, sensor))) +
geom_line(alpha = 0.5) +
facet_wrap(~date) +
labs(title = "24-hour Temperature Changes", x = "Hour", y = "Average Temperature Change") +
theme_minimal()
# 4. 
去
重
后
的
唯
一
事
件
分
布
unique_events <- data %>%
select(date, hour, light_cycle_duration, temp_change_1, temp_change_2, temp_change_3, humidity_change) %>%
pivot_longer(cols = c(light_cycle_duration, temp_change_1, temp_change_2, temp_change_3, humidity_change),
names_to = "event_type",
values_to = "value") %>%
filter(!is.na(value) & value != 0) %>%  # 
排
除
零
值
变
化
distinct(date, hour, event_type) %>%
count(date, event_type)
ggplot(unique_events, aes(x = date, y = n, fill = event_type)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Distribution of Unique Events", x = "Date", y = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# 
保
存
图
表
ggsave("humidity_changes.png", width = 10, height = 6)
ggsave("light_cycle_duration.png", width = 10, height = 6)
ggsave("temperature_changes.png", width = 15, height = 10)
ggsave("unique_events_distribution.png", width = 10, height = 6)
data <- data %>%
arrange(time) %>%
group_by(date = as.Date(time), hour = lubridate::hour(time)) %>%
mutate(
temp_change = abs(temperature_1 - lag(temperature_1)),
humidity_change = abs(humidity - lag(humidity)),
unique_events = n_distinct(your_event_column)  # Replace 'your_event_column' with the appropriate column for unique events
) %>%
ungroup()
View(data)
data <- data %>%
arrange(time) %>%
group_by(date, hour) %>%
mutate(
temp_change = abs(temperature_1 - lag(temperature_1)),
humidity_change = abs(humidity - lag(humidity))
) %>%
ungroup()
# Replace NA values created by the lag function
data <- data %>%
mutate(
temp_change = replace_na(temp_change, 0),
humidity_change = replace_na(humidity_change, 0)
)
# Summarize data by hour within each day
hourly_summary <- data %>%
group_by(date, hour) %>%
summarise(
avg_temp_change = mean(temp_change, na.rm = TRUE),
avg_humidity_change = mean(humidity_change, na.rm = TRUE),
light_cycle_duration = mean(light_cycle_duration, na.rm = TRUE),
unique_events = n_distinct(event_id)  # Assuming 'event_id' represents unique events
) %>%
ungroup()
hourly_data <- data %>%
group_by(date, hour) %>%
summarise(
temp_1 = mean(temperature_1, na.rm = TRUE),
temp_2 = mean(temperature_2, na.rm = TRUE),
temp_3 = mean(temperature_3, na.rm = TRUE),
light_cycle = sum(light_cycle_duration, na.rm = TRUE)
) %>%
ungroup()
# 
创
建
温
度
折
线
图
temp_plot <- ggplot(hourly_data, aes(x = hour)) +
geom_line(aes(y = temp_1, color = "Location 1")) +
geom_line(aes(y = temp_2, color = "Location 2")) +
geom_line(aes(y = temp_3, color = "Location 3")) +
facet_wrap(~date, ncol = 2) +
scale_color_manual(values = c("Location 1" = "red", "Location 2" = "blue", "Location 3" = "green")) +
labs(title = "24-hour Temperature Changes at Three Locations",
x = "Hour of Day",
y = "Temperature",
color = "Location") +
theme_minimal() +
theme(legend.position = "bottom")
# 
创
建
光
照
循
环
长
度
折
线
图
light_plot <- ggplot(hourly_data, aes(x = hour, y = light_cycle)) +
geom_line(color = "orange") +
facet_wrap(~date, ncol = 2) +
labs(title = "24-hour Light Cycle Duration",
x = "Hour of Day",
y = "Light Cycle Duration (minutes)") +
theme_minimal()
# 
保
存
图
表
ggsave("daily_temperature_changes.png", plot = temp_plot, width = 15, height = 10)
ggsave("daily_light_cycle_duration.png", plot = light_plot, width = 15, height = 10)
# 
打
印
一
些
汇
总
统
计
summary_stats <- hourly_data %>%
group_by(date) %>%
summarise(
avg_temp_1 = mean(temp_1, na.rm = TRUE),
avg_temp_2 = mean(temp_2, na.rm = TRUE),
avg_temp_3 = mean(temp_3, na.rm = TRUE),
total_light_duration = sum(light_cycle, na.rm = TRUE)
)
print(summary_stats)
hourly_data <- data %>%
group_by(date, hour) %>%
summarise(
temp_1 = mean(temperature_1, na.rm = TRUE),
temp_2 = mean(temperature_2, na.rm = TRUE),
temp_3 = mean(temperature_3, na.rm = TRUE),
light_cycle = sum(light_cycle_duration, na.rm = TRUE)
) %>%
ungroup()
# 
创
建
一
个
函
数
来
生
成
每
天
的
组
合
图
create_daily_plot <- function(day_data) {
# 
温
度
图
temp_plot <- ggplot(day_data, aes(x = hour)) +
geom_line(aes(y = temp_1, color = "Sensor 1")) +
geom_line(aes(y = temp_2, color = "Sensor 2")) +
geom_line(aes(y = temp_3, color = "Sensor 3")) +
scale_color_manual(values = c("Sensor 1" = "red", "Sensor 2" = "blue", "Sensor 3" = "green")) +
labs(y = "Temperature", color = "Sensor") +
theme_minimal() +
theme(legend.position = "bottom")
# 
光
照
循
环
图
light_plot <- ggplot(day_data, aes(x = hour, y = light_cycle)) +
geom_line(color = "orange") +
labs(y = "Light Cycle (min)") +
theme_minimal() +
theme(axis.title.x = element_blank())  # 
移
除x
轴
标
题
，
因
为
它
与
温
度
图
重
复
# 
组
合
图
combined_plot <- temp_plot + light_plot +
plot_layout(ncol = 1, heights = c(3, 1)) +
plot_annotation(
title = paste("Temperature and Light Cycle -", unique(day_data$date)),
subtitle = "Temperature (top) and Light Cycle Duration (bottom)",
theme = theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5))
)
return(combined_plot)
}
# 
为
每
一
天
创
建
并
保
存
图
表
unique_dates <- unique(hourly_data$date)
for (current_date in unique_dates) {
day_data <- hourly_data %>% filter(date == current_date)
plot <- create_daily_plot(day_data)
filename <- paste0("daily_plot_", current_date, ".png")
ggsave(filename, plot, width = 12, height = 8)
}
install.packages("patchwork")
library(patchwork)
hourly_data <- data %>%
group_by(date, hour) %>%
summarise(
temp_1 = mean(temperature_1, na.rm = TRUE),
temp_2 = mean(temperature_2, na.rm = TRUE),
temp_3 = mean(temperature_3, na.rm = TRUE),
light_cycle = sum(light_cycle_duration, na.rm = TRUE)
) %>%
ungroup()
# 
创
建
一
个
函
数
来
生
成
每
天
的
组
合
图
create_daily_plot <- function(day_data) {
# 
温
度
图
temp_plot <- ggplot(day_data, aes(x = hour)) +
geom_line(aes(y = temp_1, color = "Sensor 1")) +
geom_line(aes(y = temp_2, color = "Sensor 2")) +
geom_line(aes(y = temp_3, color = "Sensor 3")) +
scale_color_manual(values = c("Sensor 1" = "red", "Sensor 2" = "blue", "Sensor 3" = "green")) +
labs(y = "Temperature", color = "Sensor") +
theme_minimal() +
theme(legend.position = "bottom")
# 
光
照
循
环
图
light_plot <- ggplot(day_data, aes(x = hour, y = light_cycle)) +
geom_line(color = "orange") +
labs(y = "Light Cycle (min)") +
theme_minimal() +
theme(axis.title.x = element_blank())  # 
移
除x
轴
标
题
，
因
为
它
与
温
度
图
重
复
# 
组
合
图
combined_plot <- temp_plot + light_plot +
plot_layout(ncol = 1, heights = c(3, 1)) +
plot_annotation(
title = paste("Temperature and Light Cycle -", unique(day_data$date)),
subtitle = "Temperature (top) and Light Cycle Duration (bottom)",
theme = theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5))
)
return(combined_plot)
}
# 
为
每
一
天
创
建
并
保
存
图
表
unique_dates <- unique(hourly_data$date)
for (current_date in unique_dates) {
day_data <- hourly_data %>% filter(date == current_date)
plot <- create_daily_plot(day_data)
filename <- paste0("daily_plot_", current_date, ".png")
ggsave(filename, plot, width = 12, height = 8)
}
# 
打
印
汇
总
统
计
summary_stats <- hourly_data %>%
group_by(date) %>%
summarise(
avg_temp_1 = mean(temp_1, na.rm = TRUE),
avg_temp_2 = mean(temp_2, na.rm = TRUE),
avg_temp_3 = mean(temp_3, na.rm = TRUE),
total_light_duration = sum(light_cycle, na.rm = TRUE)
)
print(summary_stats)
# Create additional time-related columns
data$date <- as.Date(data$time)
data$hour <- hour(data$time)
# Define thresholds for significant changes
temp_threshold <- 1  # Threshold for significant temperature change
humidity_threshold <- 5  # Threshold for significant humidity change
# Calculate temperature and humidity changes (absolute differences between consecutive records)
data <- data %>%
arrange(time) %>%
group_by(date, hour) %>%
mutate(
temp_change = abs(temperature_1 - lag(temperature_1)),
humidity_change = abs(humidity - lag(humidity)),
significant_temp_event = ifelse(temp_change > temp_threshold, 1, 0),
significant_humidity_event = ifelse(humidity_change > humidity_threshold, 1, 0)
) %>%
ungroup()
# Replace NA values created by the lag function
data <- data %>%
mutate(
temp_change = replace_na(temp_change, 0),
humidity_change = replace_na(humidity_change, 0)
)
# Summarize data by hour within each day
hourly_summary <- data %>%
group_by(date, hour) %>%
summarise(
avg_temp_change = mean(temp_change, na.rm = TRUE),
avg_humidity_change = mean(humidity_change, na.rm = TRUE),
light_cycle_duration = mean(light_cycle_duration, na.rm = TRUE),
unique_events = sum(significant_temp_event + significant_humidity_event)
) %>%
ungroup()
# Plotting functions
plot_time_series <- function(df, y_col, title, y_label) {
ggplot(df, aes(x = hour, y = !!sym(y_col), color = as.factor(date))) +
geom_line() +
labs(title = title, x = "Hour of the Day", y = y_label, color = "Date") +
theme_minimal()
}
# Plot each variable
temp_plot <- plot_time_series(hourly_summary, "avg_temp_change", "Average Temperature Change by Hour", "Temperature Change")
humidity_plot <- plot_time_series(hourly_summary, "avg_humidity_change", "Average Humidity Change by Hour", "Humidity Change")
light_cycle_plot <- plot_time_series(hourly_summary, "light_cycle_duration", "Light Cycle Duration by Hour", "Light Cycle Duration (seconds)")
events_plot <- plot_time_series(hourly_summary, "unique_events", "Unique Events by Hour", "Number of Unique Events")
# Save the plots
ggsave("avg_temp_change_by_hour.png", temp_plot, width = 10, height = 6)
ggsave("avg_humidity_change_by_hour.png", humidity_plot, width = 10, height = 6)
ggsave("light_cycle_duration_by_hour.png", light_cycle_plot, width = 10, height = 6)
ggsave("unique_events_by_hour.png", events_plot, width = 10, height = 6)
# Print the summary data for review
print(hourly_summary)
# Optionally save the summary data as CSV
write.csv(hourly_summary, "hourly_summary.csv", row.names = FALSE)
q()
